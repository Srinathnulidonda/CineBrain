provide the powerful frontend code based on the backend/app.py
Project Overview
Create a Netflix-inspired movie recommendation platform using Pure HTML5, CSS3, and Modern JavaScript (ES6+). The platform should feature a dark theme with red accents, responsive design, and seamless API integration with the Flask backend.
Technology Stack Requirements

Core: Pure HTML5, CSS3, Modern JavaScript (ES6+) - No frameworks
Styling: Tailwind CSS (utility-first) + Custom CSS for Netflix-inspired design
Layout: CSS Grid and Flexbox for responsive design
API: Fetch API for backend communication
Authentication: JWT token-based authentication
Storage: JavaScript variables only (no localStorage/sessionStorage)
Performance: Progressive loading, image optimization, lazy loading

Design System & Theme
Color Palette
css:root {
  --primary-bg: #141414;
  --secondary-bg: #1f1f1f;
  --accent-red: #e50914;
  --text-primary: #ffffff;
  --text-secondary: #cccccc;
  --dark-blue: #0f0f23;
  --card-hover: #2a2a2a;
  --border-color: #333333;
}
Typography

Primary Font: Netflix-style sans-serif
Headings: Bold, modern typography
Body: Clean, readable text with proper line spacing

Component Standards

Dark theme by default with smooth transitions
Hover effects on interactive elements
Netflix-inspired card designs
Smooth scrolling and animations
Mobile-first responsive design

Project Structure
movie-platform/
├── index.html                 # Homepage (anonymous users)
├── login.html                 # Login/Register page
├── dashboard.html             # User dashboard (logged-in users)
├── movie-detail.html          # Movie/TV show detail page
├── profile.html               # User profile page
├── admin/
│   ├── dashboard.html         # Admin dashboard
│   ├── content-browser.html   # Browse and curate content
│   ├── posts.html             # Manage admin posts
│   └── analytics.html         # Admin analytics
├── css/
│   ├── main.css              # Main styles and theme
│   ├── components.css        # Reusable component styles
│   └── responsive.css        # Responsive design
├── js/
│   ├── app.js                # Main application logic
│   ├── api.js                # API communication layer
│   ├── auth.js               # Authentication handling
│   ├── components.js         # Reusable UI components
│   ├── utils.js              # Utility functions
│   └── admin.js              # Admin-specific functionality
└── assets/
    ├── images/               # Static images
    └── icons/                # SVG icons

PERSONALIZED DASHBOARD (Logged-in users):

Welcome Banner with user name and quick stats
Continue Watching - Resume from last position
Recommended For You - Hybrid ML recommendations
Based on Your Recent Activity - Content-based filtering
Genre-based Recommendations - From user preferences
Similar to What You Liked - Collaborative filtering
Watchlist Quick Access - User's saved content
Recently Added - New content in preferred genres
Interactive Preference Tuning - Real-time recommendation updates


cconst API_BASE = 'https://backend-app-970m.onrender.com/api';

class APIService {
    constructor() {
        this.token = localStorage.getItem('auth_token');
        this.baseHeaders = {
            'Content-Type': 'application/json',
            'Authorization': this.token ? `Bearer ${this.token}` : ''
        };
    }

    // Authentication endpoints
    async login(credentials) { /* /api/login */ }
    async register(userData) { /* /api/register */ }
    
    // Content endpoints
    async getHomepage() { /* /api/homepage */ }
    async getRecommendations() { /* /api/recommendations */ }
    async getContentDetails(id) { /* /api/content/${id} */ }
    async searchContent(query) { /* /api/search */ }
    
    // User interactions
    async recordInteraction(data) { /* /api/interact */ }
    
    // Admin endpoints
    async adminBrowseContent(params) { /* /api/admin/browse-content */ }
    async adminCreatePost(data) { /* /api/admin/create-post */ }
    async adminGetPosts() { /* /api/admin/posts */ }
    async adminAnalytics() { /* /api/admin/analytics */ }
}

Design Philosophy

Mobile-First Approach: Design for mobile screens first, then progressively enhance for tablets and desktop
Touch-Friendly: All interactive elements optimized for finger navigation
Netflix-Inspired: Dark theme with red accents, card-based layouts, smooth animations
Progressive Enhancement: Core functionality works on all devices, enhanced features on larger screens

Technical Stack

Pure HTML5/CSS3/JavaScript ES6+ (No frameworks)
Tailwind CSS utilities + Custom Netflix-style CSS
CSS Grid & Flexbox for responsive layouts
Fetch API for backend communication
JWT Authentication (memory-stored tokens only)

Responsive Breakpoints
css/* Mobile First */
:root {
  --mobile: 320px;
  --tablet: 768px;
  --desktop: 1024px;
  --large: 1440px;
}
Touch-Optimized Components Required
1. Navigation

Mobile: Hamburger menu with slide-out drawer
Tablet+: Horizontal navbar with dropdowns
Touch targets: Minimum 44px height
Swipe gestures: Left/right navigation on content carousels

2. Movie Cards

Mobile: Single column, full-width cards
Tablet: 2-3 column grid
Desktop: 4-6 column grid with hover effects
Touch feedback: Immediate visual response on tap
Card interactions: Tap to expand, swipe for quick actions

3. Content Carousels

Mobile: Horizontal scroll with momentum
Touch indicators: Subtle scroll hints
Infinite scroll: Smooth loading of new content
Gesture support: Pinch-to-zoom on movie posters

4. Search Interface

Mobile: Full-screen search overlay
Tablet+: Inline search with dropdown results
Voice search: Touch-to-activate voice input
Predictive search: Real-time suggestions

5. Video Player

Mobile: Full-screen portrait/landscape modes
Touch controls: Tap to play/pause, swipe for seek
Gesture volume: Vertical swipe for volume control
Picture-in-picture: Minimize while browsing

6. User Dashboard

Mobile: Vertical stack of recommendation sections
Tablet: 2-column layout with sidebar
Desktop: 3-column layout with expanded content
Pull-to-refresh: Mobile gesture for content updates

Key Features to Implement
Core Pages

Homepage (index.html) - Anonymous user landing
Login/Register (login.html) - Touch-optimized forms
Dashboard (dashboard.html) - Personalized recommendations
Movie Detail (movie-detail.html) - Full content information
Profile (profile.html) - User settings and preferences

Mobile-Specific Interactions

Swipe gestures: Navigate between content sections
Touch feedback: Visual confirmation for all interactions
Momentum scrolling: Smooth, native-feeling scrolls
Haptic feedback: Subtle vibrations for key actions (where supported)
Offline indicators: Show connection status and cached content

Performance Optimizations

Lazy loading: Images load as user scrolls
Progressive images: Low-quality placeholders → high-quality images
Touch debouncing: Prevent accidental double-taps
Smooth animations: 60fps transitions using CSS transforms
Efficient scrolling: Virtual scrolling for large lists

Success Criteria

Touch-first experience: All interactions feel natural on mobile
Responsive everywhere: Seamless experience across all screen sizes
Performance: Fast loading, smooth scrolling, instant feedback
Accessibility: Screen reader friendly, keyboard navigation
Netflix feel: Dark theme, smooth transitions, intuitive navigation

Implementation Priority

Mobile layout and navigation
Touch-optimized movie cards and carousels
Responsive breakpoints and grid systems
Search and content discovery
User authentication and dashboard
Advanced gestures and interactions

This prompt focuses on creating a mobile-first, touch-optimized Netflix-style platform that progressively enhances to desktop while maintaining the core mobile experience quality.