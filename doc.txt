according to the backend/app.py file provide the 
all the api's and should be continuesly fetch correctly according to the backend/app.py
login, register, load anime, movies recommendations get recommendations 
Create a modern, responsive movie and TV show recommendation system frontend with the following requirements:
Movie Recommendation System - Frontend Development Guide
Project Structure
movie-recommendation-frontend/
├── index.html                          # Main entry point
├── manifest.json                       # PWA manifest
├── service-worker.js                   # PWA service worker
├── assets/
│   ├── css/
│   │   ├── main.css                   # Global styles and variables
│   │   ├── components.css             # Reusable component styles
│   │   ├── themes.css                 # Dark/Light theme definitions
│   │   └── responsive.css             # Media queries and breakpoints
│   ├── js/
│   │   ├── core/
│   │   │   ├── app.js                 # Main application controller
│   │   │   ├── router.js              # SPA routing system
│   │   │   ├── api.js                 # API communication layer
│   │   │   ├── auth.js                # Authentication manager
│   │   │   └── storage.js             # Local storage utilities
│   │   ├── components/
│   │   │   ├── BaseComponent.js       # Base component class
│   │   │   ├── Header.js              # Navigation header
│   │   │   ├── Footer.js              # Footer component
│   │   │   ├── MovieCard.js           # Movie card component
│   │   │   ├── Carousel.js            # Content carousel
│   │   │   ├── Modal.js               # Modal dialogs
│   │   │   ├── SearchBar.js           # Search functionality
│   │   │   ├── UserProfile.js         # User profile dropdown
│   │   │   ├── LoadingSpinner.js      # Loading animations
│   │   │   ├── Toast.js               # Notification system
│   │   │   ├── StarRating.js          # Rating component
│   │   │   └── VideoPlayer.js         # Video player modal
│   │   ├── pages/
│   │   │   ├── HomePage.js            # Homepage controller
│   │   │   ├── MovieDetailPage.js     # Movie detail page
│   │   │   ├── SearchPage.js          # Search results page
│   │   │   ├── ProfilePage.js         # User profile page
│   │   │   ├── LoginPage.js           # Login/Register page
│   │   │   └── AdminPage.js           # Admin dashboard
│   │   ├── utils/
│   │   │   ├── helpers.js             # Utility functions
│   │   │   ├── constants.js           # App constants
│   │   │   ├── validators.js          # Form validation
│   │   │   └── formatters.js          # Data formatting
│   │   └── services/
│   │       ├── MovieService.js        # Movie data service
│   │       ├── UserService.js         # User data service
│   │       ├── RecommendationService.js # Recommendation service
│   │       └── AnalyticsService.js    # Analytics tracking
│   ├── images/
│   │   ├── icons/                     # App icons
│   │   ├── placeholders/              # Placeholder images
│   │   └── backgrounds/               # Background images
│   └── fonts/                         # Custom fonts
├── pages/
│   ├── home.html                      # Homepage template
│   ├── movie-detail.html              # Movie detail template
│   ├── search.html                    # Search page template
│   ├── profile.html                   # User profile template
│   ├── login.html                     # Login page template
│   └── admin.html                     # Admin dashboard template
└── README.md                          # Project documentation
Detailed Frontend Development Prompt
Core Architecture & Code Reusability
Base Component System:
Create a BaseComponent class that all components inherit from. This class should handle:

Common lifecycle methods (mount, unmount, update)
Event listener management with automatic cleanup
State management with reactive updates
Template rendering with data binding
Error handling and loading states
Responsive breakpoint detection

Component Factory Pattern:
Implement a component factory that creates reusable instances:

MovieCard component with configurable layouts (grid, list, carousel)
Carousel component with touch/swipe support and infinite scroll
Modal component with customizable content slots
Form components with built-in validation
Button components with loading states and variants

State Management System:
Create a lightweight state management system:

Global application state with reactive updates
User authentication state persistence
Content cache management
Theme preferences storage
Component-level state isolation

Design System Implementation
Netflix-Inspired Dark Theme:
css:root {
  --primary-bg: #141414;
  --secondary-bg: #1f1f1f;
  --accent-color: #e50914;
  --text-primary: #ffffff;
  --text-secondary: #cccccc;
  --text-muted: #808080;
  --border-color: #333333;
  --success-color: #46d369;
  --warning-color: #f5c518;
  --error-color: #ff6b6b;
}
Responsive Grid System:
Implement a flexible grid system using CSS Grid and Flexbox:

12-column grid with responsive breakpoints
Auto-adjusting movie cards (6 on mobile, 8 on tablet, 12 on desktop)
Masonry layout for search results
Horizontal scrolling sections with momentum scrolling

Homepage Implementation
Hero Section:

Auto-playing background video or high-quality backdrop image
Trending movie carousel with smooth transitions
Play trailer button with modal video player
Add to watchlist/favorites functionality when login personal
Gradient overlay for text readability
Trending movies, anime, series all posters should be shown

Content Sections:

"What's Hot" - Trending movies with horizontal scroll
"Because You Watched" - Personalized recommendations
"Regional Favorites" - Language-specific content sections
"Critics' Choice" - Admin-curated recommendations
"Continue Watching" - User's watch history
"New Releases" - Recently added content

Advanced Features:

Infinite horizontal scrolling with momentum
Lazy loading for better performance
Skeleton screens during content loading
Auto-refresh recommendations based on interactions
Personalized section ordering based on user preferences

Movie Detail Page
Comprehensive Movie Information:

Large hero section with backdrop image and poster
Dynamic gradient overlay based on dominant colors
Play trailer button with YouTube/Vimeo integration
Complete cast and crew with clickable profiles
Multiple rating sources (IMDB, Rotten Tomatoes, User ratings)
Genre tags with filtering capability
Release information and content ratings
ott avalibality and is it there free to watch
watch link

Interactive Elements:

Add to watchlist/favorites with animated feedback
Star rating system with hover effects
User review submission form
Social sharing buttons
"More Like This" recommendations carousel
Image gallery with lightbox functionality

Search & Discovery
Advanced Search Interface:

Real-time search suggestions with debouncing
Filter by genre, year, language, rating
Sort options (popularity, rating, release date)
Search history and saved searches
Voice search integration (where supported)

Search Results:

Grid and list view toggle
Infinite scroll pagination
Advanced filtering sidebar
Search result highlighting
Related searches suggestions

User Authentication & Profile
Authentication System:

Slide-out login/register modal
Social login integration (Google, Facebook)
JWT token management with auto-refresh
Remember me functionality
Password reset flow

User Profile:

Viewing history with progress tracking
Watchlist and favorites management
Rating history and reviews
Personalization preferences
Theme and language settings

Admin Dashboard
Content Management:

Search across multiple databases (TMDB, Jikan, regional APIs)
Content selection with preview cards
Drag-and-drop recommendation creation
Rich text editor for descriptions
Priority and expiration date settings
Bulk operations for content management

Analytics Dashboard:

User engagement metrics with charts
Content performance statistics
Real-time system status monitoring
A/B testing interface
Export functionality for reports