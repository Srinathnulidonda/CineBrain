correctly according to the backend/app.py login, register, load anime, movies recommendations get recommendations anime poster, movie poster, tv serier poster should be correctly shown
and every single this should be correctly Designed use advanced bootstrap for the complete design 
provide the css code in single line by line
Create a modern, responsive movie and TV show recommendation system frontend with the following requirements: Movie Recommendation System - Frontend Architecture TECHNOLOGY STACK Core Technologies

Pure HTML5, CSS3, JavaScript (ES6+) - No frameworks for maximum performance and control Tailwind CSS v3.4 - Utility-first styling with custom configuration Bootstrap Grid System v5.3 - Responsive layouts only Fetch API - All backend communication JWT Authentication - Token-based security Progressive Web App (PWA) - Offline capability and app-like experience Local Storage - User preferences and session management

Performance Features

Code Splitting - Lazy loading for optimal performance Image Optimization - WebP format with fallbacks Service Workers - Caching and offline functionality Intersection Observer - Infinite scroll and lazy loading Debounced Search - Optimized API calls

DESIGN SYSTEM Color Palette css:root { /* Primary Colors */ --primary-bg: #141414; --secondary-bg: #1f1f1f; --card-bg: #2a2a2a;

/* Accent Colors */ --netflix-red: #e50914; --hover-red: #f40612; --dark-red: #b20710;

/* Text Colors */ --text-primary: #ffffff; --text-secondary: #cccccc; --text-muted: #999999;

/* UI Colors */ --border-color: #333333; --hover-bg: #333333; --success: #46d369; --warning: #ffa500; --error: #ff4444; } Typography Scale

Headings: Netflix Sans, system-ui fallback Body: system-ui, -apple-system, sans-serif Mono: 'Fira Code', monospace

Movie Recommendation Frontend - Detailed Development Prompt
Project Structure
movie-recommendation-frontend/
├── index.html                 # Main entry point
├── login.html                 # Login/Register page
├── profile.html               # User profile page
├── movie-detail.html          # Movie/Show detail page
├── admin/
│   ├── index.html            # Admin dashboard
│   ├── browse-content.html   # Content browsing interface
│   ├── create-post.html      # Create admin posts
│   └── analytics.html        # Admin analytics
├── assets/
│   ├── css/
│   │   ├── main.css         # Core styles
│   │   ├── components.css   # Component styles
│   │   └── admin.css        # Admin specific styles
│   ├── js/
│   │   ├── app.js           # Main application logic
│   │   ├── api.js           # API service layer
│   │   ├── auth.js          # Authentication handling
│   │   ├── components.js    # Reusable components
│   │   ├── utils.js         # Utility functions
│   │   └── admin.js         # Admin functionality
│   └── images/
│       └── placeholders/    # Placeholder images
├── sw.js                    # Service Worker for PWA
└── manifest.json            # PWA manifest
Technology Stack & Dependencies
Core Technologies

HTML5 with semantic markup
CSS3 with modern features (Grid, Flexbox, Custom Properties)
JavaScript ES6+ with modules and async/await
Tailwind CSS via CDN for utility-first styling
Bootstrap Grid for responsive layouts
Fetch API for HTTP requests
JWT for authentication
LocalStorage for client-side data persistence
Service Worker for PWA features

CDN Dependencies
html<!-- Tailwind CSS -->
<script src="https://cdn.tailwindcss.com"></script>

<!-- Bootstrap Grid Only -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap-grid.min.css" rel="stylesheet">

<!-- Font Awesome Icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

<!-- Google Fonts -->
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
Design System & Styling
Color Palette
css:root {
  /* Primary Colors */
  --primary-bg: #141414;
  --secondary-bg: #1f1f1f;
  --tertiary-bg: #2a2a2a;
  
  /* Accent Colors */
  --accent-primary: #e50914;
  --accent-secondary: #ff6b6b;
  --accent-tertiary: #0f0f23;
  
  /* Text Colors */
  --text-primary: #ffffff;
  --text-secondary: #cccccc;
  --text-muted: #999999;
  
  /* Status Colors */
  --success: #28a745;
  --warning: #ffc107;
  --error: #dc3545;
  --info: #17a2b8;
  
  /* Light Mode Override */
  --light-primary-bg: #ffffff;
  --light-secondary-bg: #f8f9fa;
  --light-text-primary: #333333;
}
Typography System
css/* Font Weights */
.font-light { font-weight: 300; }
.font-normal { font-weight: 400; }
.font-medium { font-weight: 500; }
.font-semibold { font-weight: 600; }
.font-bold { font-weight: 700; }

/* Font Sizes */
.text-xs { font-size: 0.75rem; }
.text-sm { font-size: 0.875rem; }
.text-base { font-size: 1rem; }
.text-lg { font-size: 1.125rem; }
.text-xl { font-size: 1.25rem; }
.text-2xl { font-size: 1.5rem; }
.text-3xl { font-size: 1.875rem; }
.text-4xl { font-size: 2.25rem; }
API Integration Layer
API Service (api.js)
javascriptclass APIService {
  constructor() {
    this.baseURL = 'https://backend-app-970m.onrender.com/api';
    this.token = localStorage.getItem('authToken');
  }

  // Authentication endpoints
  async login(credentials) { /* POST /api/login */ }
  async register(userData) { /* POST /api/register */ }
  
  // Content endpoints
  async getHomepage() { /* GET /api/homepage */ }
  async getRecommendations() { /* GET /api/recommendations */ }
  async getContentDetails(id) { /* GET /api/content/:id */ }
  async searchContent(query, type) { /* GET /api/search */ }
  
  // User interaction endpoints
  async recordInteraction(data) { /* POST /api/interact */ }
  
  // Admin endpoints
  async adminBrowseContent(params) { /* GET /api/admin/browse-content */ }
  async adminCreatePost(postData) { /* POST /api/admin/create-post */ }
  async adminGetPosts() { /* GET /api/admin/posts */ }
  async adminGetAnalytics() { /* GET /api/admin/analytics */ }
}
Reusable Components System
1. Movie Card Component
javascriptclass MovieCard {
  constructor(movie, options = {}) {
    this.movie = movie;
    this.options = {
      showRating: true,
      showGenres: true,
      showYear: true,
      size: 'medium', // small, medium, large
      ...options
    };
  }

  render() {
    return `
      <div class="movie-card ${this.options.size}" data-movie-id="${this.movie.id}">
        <div class="movie-poster">
          <img src="${this.getPosterUrl()}" alt="${this.movie.title}" loading="lazy">
          <div class="movie-overlay">
            <button class="play-btn"><i class="fas fa-play"></i></button>
            <button class="wishlist-btn"><i class="far fa-heart"></i></button>
          </div>
        </div>
        <div class="movie-info">
          <h3 class="movie-title">${this.movie.title}</h3>
          ${this.renderMetadata()}
        </div>
      </div>
    `;
  }
}
2. Carousel Component
javascriptclass Carousel {
  constructor(containerId, items, itemRenderer) {
    this.container = document.getElementById(containerId);
    this.items = items;
    this.itemRenderer = itemRenderer;
    this.currentIndex = 0;
  }

  render() {
    const carouselHTML = `
      <div class="carousel-container">
        <button class="carousel-nav prev"><i class="fas fa-chevron-left"></i></button>
        <div class="carousel-track">
          ${this.items.map(item => this.itemRenderer(item)).join('')}
        </div>
        <button class="carousel-nav next"><i class="fas fa-chevron-right"></i></button>
      </div>
    `;
    this.container.innerHTML = carouselHTML;
    this.attachEventListeners();
  }
}
3. Modal Component
javascriptclass Modal {
  constructor(options = {}) {
    this.options = {
      title: '',
      content: '',
      size: 'medium',
      closeOnBackdrop: true,
      ...options
    };
  }

  show() {
    document.body.insertAdjacentHTML('beforeend', this.render());
    this.attachEventListeners();
    document.body.classList.add('modal-open');
  }

  hide() {
    const modal = document.querySelector('.modal-backdrop');
    if (modal) modal.remove();
    document.body.classList.remove('modal-open');
  }
}
4. Loading Skeleton Component
javascriptclass LoadingSkeleton {
  static movieCard() {
    return `
      <div class="skeleton-card">
        <div class="skeleton-poster"></div>
        <div class="skeleton-info">
          <div class="skeleton-title"></div>
          <div class="skeleton-meta"></div>
        </div>
      </div>
    `;
  }

  static hero() {
    return `
      <div class="skeleton-hero">
        <div class="skeleton-hero-content">
          <div class="skeleton-hero-title"></div>
          <div class="skeleton-hero-description"></div>
        </div>
      </div>
    `;
  }
}
